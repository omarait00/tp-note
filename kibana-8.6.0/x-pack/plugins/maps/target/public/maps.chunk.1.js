/*! Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one or more contributor license agreements. 
 * Licensed under the Elastic License 2.0; you may not use this file except in compliance with the Elastic License 2.0. */
(window.maps_bundle_jsonpfunction=window.maps_bundle_jsonpfunction||[]).push([[1],{74:function(n,t,e){"use strict";e.r(t),e.d(t,"getKibanaTileMap",(function(){return u})),e.d(t,"getEmsFileLayers",(function(){return o})),e.d(t,"getEmsTmsServices",(function(){return s})),e.d(t,"getGlyphUrl",(function(){return b})),e.d(t,"isRetina",(function(){return m})),e.d(t,"makePublicExecutionContext",(function(){return p}));var i=e(0),c=e(4),r=e(22),a=e(28);function u(){return Object(c.P)()}async function o(){return Object(c.k)().isEMSEnabled()?(await f()).getFileLayers():[]}async function s(){return Object(c.k)().isEMSEnabled()?(await f()).getTMSServices():[]}let d,l=null;async function f(){l||(l=new Promise((async(n,t)=>{try{n(await Object(c.A)().createEMSClient())}catch(n){t(n)}})));const n=await l,t=Object(r.c)();return d!==t&&(d=t,n.addQueryParams({license:t||""})),n}function b(){const n=Object(c.k)();return n.isEMSEnabled()?n.getEMSFontLibraryUrl():Object(c.q)().basePath.prepend(`/${i.G}/{fontstack}/{range}`)}function m(){return 2===window.devicePixelRatio}function p(n){const t=Object(c.n)().get(),e=function(n){return Object(a.omitBy)({name:i.e,type:"application",...n},a.isUndefined)}({url:window.location.pathname,description:n});return void 0!==t.name&&t.name!==e.name?{...t,child:e}:{...t,...e}}}}]);