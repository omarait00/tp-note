/*! Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one or more contributor license agreements. 
 * Licensed under the Elastic License 2.0; you may not use this file except in compliance with the Elastic License 2.0. */
(window.apm_bundle_jsonpfunction=window.apm_bundle_jsonpfunction||[]).push([[5],{1083:function(e,t,n){"use strict";n.r(t);var a=n(15),r=n(0),i=n(1),o=n.n(i),s=n(35),l=n.n(s),c=n(198);const m=r.i18n.translate("xpack.apm.tutorial.agent_config.defaultStandaloneConfig",{defaultMessage:"Default Standalone configuration"});var p=n(7);function u({options:e,selectedOption:t,onChange:n,fleetLink:i}){const{fleetAgents:s,standalone:l}=Object(p.groupBy)(e,"type"),c=(null==l?void 0:l.map((({key:e,label:t})=>({key:e,label:t}))))||[],m=null!=s&&s.length?[{key:"fleet_policies",label:r.i18n.translate("xpack.apm.tutorial.agent_config.fleetPoliciesLabel",{defaultMessage:"Fleet policies"}),options:s.map((({key:e,label:t})=>({key:e,label:t})))}]:[];return o.a.createElement(a.EuiFormRow,{label:r.i18n.translate("xpack.apm.tutorial.agent_config.choosePolicyLabel",{defaultMessage:"Choose policy"}),labelAppend:i&&o.a.createElement(a.EuiText,{size:"xs"},o.a.createElement(a.EuiLink,{href:i.href},i.label)),helpText:r.i18n.translate("xpack.apm.tutorial.agent_config.choosePolicy.helper",{defaultMessage:"Adds the selected policy configuration to the snippet below."})},o.a.createElement(a.EuiComboBox,{"data-test-subj":`policySelector_${null==t?void 0:t.key}`,isClearable:!1,singleSelection:{asPlainText:!0},options:[...c,...m],selectedOptions:t?[{key:t.key,label:t.label}]:[],onChange:t=>{const a=e.find((({key:e})=>e===t[0].key));n(a)}}))}const d=l.a.div.withConfig({displayName:"CentralizedContainer",componentId:"sc-e43dnk-0"})(["display:flex;justify-content:center;align-items:center;"]),v=r.i18n.translate("xpack.apm.tutorial.agent_config.manageFleetPolicies",{defaultMessage:"Manage fleet policies"}),f=r.i18n.translate("xpack.apm.tutorial.agent_config.getStartedWithFleet",{defaultMessage:"Get started with fleet"}),g={fleetAgents:[],cloudStandaloneSetup:void 0,isFleetEnabled:!1};function S({isFleetEnabled:e,hasFleetAgents:t,basePath:n,kibanaVersion:a}){if(e)return t?{label:v,href:`${n}/app/fleet#/policies`}:{label:f,href:`${n}/app/integrations#/detail/apm/overview`}}t.default=function({variantId:e,http:t,basePath:n,isCloudEnabled:r,kibanaVersion:s}){const[l,p]=Object(i.useState)(g),[v,f]=Object(i.useState)(!0),[h,E]=Object(i.useState)();Object(i.useEffect)((()=>{!async function(){f(!0);try{const e=await t.get("/internal/apm/fleet/agents");e&&p(e)}catch(e){f(!1),console.error("Error while fetching fleet agents.",e)}}()}),[t]);const k=Object(i.useMemo)((()=>{const e=function({isCloudEnabled:e,data:t}){var n,a,r;const i=!(!e||null===(n=t.cloudStandaloneSetup)||void 0===n||!n.apmServerUrl),o=t.fleetAgents.map((e=>({key:e.id,type:"fleetAgents",label:e.name,apmServerUrl:e.apmServerUrl,secretToken:e.secretToken,isVisible:!0,isSelected:"policy-elastic-agent-on-cloud"===e.id}))),s=o.some((({isSelected:e})=>e));return[{key:"cloud",type:"standalone",label:m,apmServerUrl:null===(a=t.cloudStandaloneSetup)||void 0===a?void 0:a.apmServerUrl,secretToken:null===(r=t.cloudStandaloneSetup)||void 0===r?void 0:r.secretToken,isVisible:i&&!s,isSelected:!s},{key:"onPrem",type:"standalone",label:m,apmServerUrl:"http://localhost:8200",secretToken:"",isVisible:!i&&!s,isSelected:!s},...o].filter((({isVisible:e})=>e))}({isCloudEnabled:r,data:l}),t=e.find((({isSelected:e})=>e));return E(t),f(!1),e}),[l,r]);if(v)return o.a.createElement(d,{"data-test-subj":"loading"},o.a.createElement(a.EuiLoadingSpinner,null));const T=!!l.fleetAgents.length;return o.a.createElement(o.a.Fragment,null,o.a.createElement(u,{options:k,selectedOption:h,onChange:e=>E(e),fleetLink:S({isFleetEnabled:l.isFleetEnabled,hasFleetAgents:T,basePath:n,kibanaVersion:s})}),o.a.createElement(c.a,{variantId:e,apmServerUrl:null==h?void 0:h.apmServerUrl,secretToken:null==h?void 0:h.secretToken}))}},114:function(e,t,n){var a,r,i,o;
/*!
 * mustache.js - Logic-less {{mustache}} templates with JavaScript
 * http://github.com/janl/mustache.js
 */o=function(e){var t=Object.prototype.toString,n=Array.isArray||function(e){return"[object Array]"===t.call(e)};function a(e){return"function"==typeof e}function r(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function i(e,t){return null!=e&&"object"==typeof e&&t in e}var o=RegExp.prototype.test,s=/\S/;var l={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},c=/\s*/,m=/\s+/,p=/\s*=/,u=/\s*\}/,d=/#|\^|\/|>|\{|&|=|!/;function v(e){this.string=e,this.tail=e,this.pos=0}function f(e,t){this.view=e,this.cache={".":this.view},this.parent=t}function g(){this.cache={}}v.prototype.eos=function(){return""===this.tail},v.prototype.scan=function(e){var t=this.tail.match(e);if(!t||0!==t.index)return"";var n=t[0];return this.tail=this.tail.substring(n.length),this.pos+=n.length,n},v.prototype.scanUntil=function(e){var t,n=this.tail.search(e);switch(n){case-1:t=this.tail,this.tail="";break;case 0:t="";break;default:t=this.tail.substring(0,n),this.tail=this.tail.substring(n)}return this.pos+=t.length,t},f.prototype.push=function(e){return new f(e,this)},f.prototype.lookup=function(e){var t,n=this.cache;if(n.hasOwnProperty(e))t=n[e];else{for(var r,o,s=this,l=!1;s;){if(e.indexOf(".")>0)for(t=s.view,r=e.split("."),o=0;null!=t&&o<r.length;)o===r.length-1&&(l=i(t,r[o])),t=t[r[o++]];else t=s.view[e],l=i(s.view,e);if(l)break;s=s.parent}n[e]=t}return a(t)&&(t=t.call(this.view)),t},g.prototype.clearCache=function(){this.cache={}},g.prototype.parse=function(t,a){var i=this.cache,l=i[t];return null==l&&(l=i[t]=function(t,a){if(!t)return[];var i,l,f,g,S=[],h=[],E=[],k=!1,T=!1;function C(){if(k&&!T)for(;E.length;)delete h[E.pop()];else E=[];k=!1,T=!1}function b(e){if("string"==typeof e&&(e=e.split(m,2)),!n(e)||2!==e.length)throw new Error("Invalid tags: "+e);i=new RegExp(r(e[0])+"\\s*"),l=new RegExp("\\s*"+r(e[1])),f=new RegExp("\\s*"+r("}"+e[1]))}b(a||e.tags);for(var y,_,A,U,M,x,$=new v(t);!$.eos();){if(y=$.pos,A=$.scanUntil(i))for(var R=0,N=A.length;R<N;++R)g=U=A.charAt(R),function(e,t){return o.call(e,t)}(s,g)?T=!0:E.push(h.length),h.push(["text",U,y,y+1]),y+=1,"\n"===U&&C();if(!$.scan(i))break;if(k=!0,_=$.scan(d)||"name",$.scan(c),"="===_?(A=$.scanUntil(p),$.scan(p),$.scanUntil(l)):"{"===_?(A=$.scanUntil(f),$.scan(u),$.scanUntil(l),_="&"):A=$.scanUntil(l),!$.scan(l))throw new Error("Unclosed tag at "+$.pos);if(M=[_,A,y,$.pos],h.push(M),"#"===_||"^"===_)S.push(M);else if("/"===_){if(!(x=S.pop()))throw new Error('Unopened section "'+A+'" at '+y);if(x[1]!==A)throw new Error('Unclosed section "'+x[1]+'" at '+y)}else"name"===_||"{"===_||"&"===_?T=!0:"="===_&&b(A)}if(x=S.pop())throw new Error('Unclosed section "'+x[1]+'" at '+$.pos);return function(e){for(var t,n=[],a=n,r=[],i=0,o=e.length;i<o;++i)switch((t=e[i])[0]){case"#":case"^":a.push(t),r.push(t),a=t[4]=[];break;case"/":r.pop()[5]=t[2],a=r.length>0?r[r.length-1][4]:n;break;default:a.push(t)}return n}(function(e){for(var t,n,a=[],r=0,i=e.length;r<i;++r)(t=e[r])&&("text"===t[0]&&n&&"text"===n[0]?(n[1]+=t[1],n[3]=t[3]):(a.push(t),n=t));return a}(h))}(t,a)),l},g.prototype.render=function(e,t,n){var a=this.parse(e),r=t instanceof f?t:new f(t);return this.renderTokens(a,r,n,e)},g.prototype.renderTokens=function(e,t,n,a){for(var r,i,o,s="",l=0,c=e.length;l<c;++l)o=void 0,"#"===(i=(r=e[l])[0])?o=this.renderSection(r,t,n,a):"^"===i?o=this.renderInverted(r,t,n,a):">"===i?o=this.renderPartial(r,t,n,a):"&"===i?o=this.unescapedValue(r,t):"name"===i?o=this.escapedValue(r,t):"text"===i&&(o=this.rawValue(r)),void 0!==o&&(s+=o);return s},g.prototype.renderSection=function(e,t,r,i){var o=this,s="",l=t.lookup(e[1]);if(l){if(n(l))for(var c=0,m=l.length;c<m;++c)s+=this.renderTokens(e[4],t.push(l[c]),r,i);else if("object"==typeof l||"string"==typeof l||"number"==typeof l)s+=this.renderTokens(e[4],t.push(l),r,i);else if(a(l)){if("string"!=typeof i)throw new Error("Cannot use higher-order sections without the original template");null!=(l=l.call(t.view,i.slice(e[3],e[5]),(function(e){return o.render(e,t,r)})))&&(s+=l)}else s+=this.renderTokens(e[4],t,r,i);return s}},g.prototype.renderInverted=function(e,t,a,r){var i=t.lookup(e[1]);if(!i||n(i)&&0===i.length)return this.renderTokens(e[4],t,a,r)},g.prototype.renderPartial=function(e,t,n){if(n){var r=a(n)?n(e[1]):n[e[1]];return null!=r?this.renderTokens(this.parse(r),t,n,r):void 0}},g.prototype.unescapedValue=function(e,t){var n=t.lookup(e[1]);if(null!=n)return n},g.prototype.escapedValue=function(t,n){var a=n.lookup(t[1]);if(null!=a)return e.escape(a)},g.prototype.rawValue=function(e){return e[1]},e.name="mustache.js",e.version="2.3.2",e.tags=["{{","}}"];var S=new g;return e.clearCache=function(){return S.clearCache()},e.parse=function(e,t){return S.parse(e,t)},e.render=function(e,t,a){if("string"!=typeof e)throw new TypeError('Invalid template! Template should be a "string" but "'+(n(r=e)?"array":typeof r)+'" was given as the first argument for mustache#render(template, view, partials)');var r;return S.render(e,t,a)},e.to_html=function(t,n,r,i){var o=e.render(t,n,r);if(!a(i))return o;i(o)},e.escape=function(e){return String(e).replace(/[&<>"'`=\/]/g,(function(e){return l[e]}))},e.Scanner=v,e.Context=f,e.Writer=g,e},t&&"string"!=typeof t.nodeName?o(t):(r=[t],void 0===(i="function"==typeof(a=o)?a.apply(t,r):a)||(e.exports=i))},198:function(e,t,n){"use strict";n.d(t,"a",(function(){return _}));var a=n(1),r=n.n(a),i=n(15),o=n(0),s=n(34);function l({apmServerUrl:e,secretToken:t}){const n=[{setting:"OTEL_EXPORTER_OTLP_ENDPOINT",value:e||"<apm-server-url>"},{setting:"OTEL_EXPORTER_OTLP_HEADERS",value:`"Authorization=Bearer ${t||"<secret-token>"}"`},{setting:"OTEL_METRICS_EXPORTER",value:"otlp",notes:"Enable metrics when supported by your OpenTelemetry client."},{setting:"OTEL_LOGS_EXPORTER",value:"otlp",notes:"Enable logs when supported by your OpenTelemetry client"},{setting:"OTEL_RESOURCE_ATTRIBUTES",value:"service.name=<app-name>,service.version=<app-version>,deployment.environment=production"}],a=[{field:"setting",name:o.i18n.translate("xpack.apm.tutorial.config_otel.column.configSettings",{defaultMessage:"Configuration setting (1)"})},{field:"value",name:o.i18n.translate("xpack.apm.tutorial.config_otel.column.configValue",{defaultMessage:"Configuration value"}),render:(e,{value:t})=>r.a.createElement(i.EuiText,{size:"s",color:"accent"},t)},{field:"notes",name:o.i18n.translate("xpack.apm.tutorial.config_otel.column.notes",{defaultMessage:"Notes"})}];return r.a.createElement(r.a.Fragment,null,r.a.createElement(i.EuiBasicTable,{items:n,columns:a,"data-test-subj":"otel-instructions-table"}),r.a.createElement(i.EuiSpacer,{size:"m"}),r.a.createElement(i.EuiText,{size:"xs",color:"subdued"},r.a.createElement(s.FormattedMessage,{id:"xpack.apm.tutorial.config_otel.description1",defaultMessage:"(1) OpenTelemetry agents and SDKs must support the {otelExporterOtlpEndpoint}, {otelExporterOtlpHeaders}, and {otelResourceAttributes} variables; some unstable components may not yet comply with this requirement.",values:{otelExporterOtlpEndpoint:r.a.createElement(i.EuiLink,{target:"_blank",href:"https://github.com/open-telemetry/opentelemetry-specification/blob/v1.10.0/specification/protocol/exporter.md"},"OTEL_EXPORTER_OTLP_ENDPOINT"),otelExporterOtlpHeaders:r.a.createElement(i.EuiLink,{target:"_blank",href:"https://github.com/open-telemetry/opentelemetry-specification/blob/v1.10.0/specification/protocol/exporter.md"},"OTEL_EXPORTER_OTLP_HEADERS"),otelResourceAttributes:r.a.createElement(i.EuiLink,{target:"_blank",href:"https://github.com/open-telemetry/opentelemetry-specification/blob/v1.10.0/specification/resource/sdk.md"},"OTEL_RESOURCE_ATTRIBUTES")}}),r.a.createElement(i.EuiSpacer,{size:"xs"}),r.a.createElement(s.FormattedMessage,{id:"xpack.apm.tutorial.config_otel.description2",defaultMessage:"The 'OTEL_METRICS_EXPORTER` and 'OTEL_LOGS_EXPORTER' environment variables may not be supported by some SDKs."}),r.a.createElement(i.EuiSpacer,{size:"xs"}),r.a.createElement(s.FormattedMessage,{id:"xpack.apm.tutorial.config_otel.description3",defaultMessage:"The exhaustive list of environment variables, command line parameters, and configuration code snippets (according to the OpenTelemetry specification) is available in the {otelInstrumentationGuide}. Some unstable OpenTelemetry clients may not support all features and may require alternate configuration mechanisms.",values:{otelInstrumentationGuide:r.a.createElement(i.EuiLink,{target:"_blank",href:"https://opentelemetry.io/docs/instrumentation"},o.i18n.translate("xpack.apm.tutorial.config_otel.instrumentationGuide",{defaultMessage:"OpenTelemetry Instrumentation guide"}))}})))}var c=n(114),m=n.n(c);const p={apmServiceName:"Delastic.apm.service_name",secretToken:"Delastic.apm.secret_token",apmServerUrl:"Delastic.apm.server_url",apmEnvironment:"Delastic.apm.environment"},u={apmServiceName:"serviceName",secretToken:"secretToken",apmServerUrl:"serverUrl",apmEnvironment:"environment"},d={apmServiceName:"SERVICE_NAME",secretToken:"SECRET_TOKEN",apmServerUrl:"SERVER_URL",apmEnvironment:"ENVIRONMENT"},v={apmServiceName:"SERVICE_NAME",secretToken:"SECRET_TOKEN",apmServerUrl:"SERVER_URL",apmEnvironment:"ENVIRONMENT"},f={apmServiceName:"service_name",secretToken:"secret_token",apmServerUrl:"server_url",apmEnvironment:"environment"},g={apmServiceName:"service_name",secretToken:"secret_token",apmServerUrl:"server_url",apmEnvironment:"environment"},S={apmServiceName:"ELASTIC_APM_SERVICE_NAME",secretToken:"ELASTIC_APM_SECRET_TOKEN",apmServerUrl:"ELASTIC_APM_SERVER_URL",apmEnvironment:"ELASTIC_APM_ENVIRONMENT"},h={apmServiceName:"ServiceName",secretToken:"SecretToken",apmServerUrl:"ServerUrl",apmEnvironment:"Environment"},E={apmServiceName:"elastic_apm.service_name",secretToken:"elastic_apm.secret_token",apmServerUrl:"elastic_apm.server_url",apmEnvironment:"elastic_apm.environment"},k={apmServiceName:"serviceName",apmServerUrl:"serverUrl",apmServiceVersion:"serviceVersion",apmEnvironment:"environment"},T={java:`java -javaagent:/path/to/elastic-apm-agent-<version>.jar \\\n-${p.apmServiceName}={{{apmServiceName}}} \\\n-${p.secretToken}={{{secretToken}}} \\\n-${p.apmServerUrl}={{{apmServerUrl}}} \\\n-${p.apmEnvironment}={{{apmEnvironment}}} \\\n-Delastic.apm.application_packages=org.example \\\n-jar {{{apmServiceName}}}.jar`,node:`// ${o.i18n.translate("xpack.apm.tutorial.nodeClient.configure.commands.addThisToTheFileTopComment",{defaultMessage:"Add this to the VERY top of the first file loaded in your app"})}\nvar apm = require('elastic-apm-node').start({\n\n  // ${o.i18n.translate("xpack.apm.tutorial.nodeClient.configure.commands.setRequiredServiceNameComment",{defaultMessage:"Override the service name from package.json"})}\n  // ${o.i18n.translate("xpack.apm.tutorial.nodeClient.configure.commands.allowedCharactersComment",{defaultMessage:"Allowed characters: a-z, A-Z, 0-9, -, _, and space"})}\n  ${u.apmServiceName}: '{{{apmServiceName}}}',\n\n  // ${o.i18n.translate("xpack.apm.tutorial.nodeClient.configure.commands.useIfApmRequiresTokenComment",{defaultMessage:"Use if APM Server requires a secret token"})}\n  ${u.secretToken}: '{{{secretToken}}}',\n\n  // ${o.i18n.translate("xpack.apm.tutorial.nodeClient.configure.commands.setCustomApmServerUrlComment",{defaultMessage:"Set the custom APM Server URL (default: {defaultApmServerUrl})",values:{defaultApmServerUrl:"http://localhost:8200"}})}\n  ${u.apmServerUrl}: '{{{apmServerUrl}}}',\n\n  // ${o.i18n.translate("xpack.apm.tutorial.nodeClient.configure.commands.setCustomServiceEnvironmentComment",{defaultMessage:"Set the service environment"})}\n  ${u.apmEnvironment}: '{{{apmEnvironment}}}'\n})`,django:`# ${o.i18n.translate("xpack.apm.tutorial.djangoClient.configure.commands.addAgentComment",{defaultMessage:"Add the agent to the installed apps"})}\nINSTALLED_APPS = (\n  'elasticapm.contrib.django',\n  # ...\n)\n\nELASTIC_APM = {\n  # ${o.i18n.translate("xpack.apm.tutorial.djangoClient.configure.commands.setRequiredServiceNameComment",{defaultMessage:"Set the required service name. Allowed characters:"})}\n  # ${o.i18n.translate("xpack.apm.tutorial.djangoClient.configure.commands.allowedCharactersComment",{defaultMessage:"a-z, A-Z, 0-9, -, _, and space"})}\n  #'${d.apmServiceName}': '{{{apmServiceName}}}',\n\n  # ${o.i18n.translate("xpack.apm.tutorial.djangoClient.configure.commands.useIfApmServerRequiresTokenComment",{defaultMessage:"Use if APM Server requires a secret token"})}\n  '${d.secretToken}': '{{{secretToken}}}',\n\n  # ${o.i18n.translate("xpack.apm.tutorial.djangoClient.configure.commands.setCustomApmServerUrlComment",{defaultMessage:"Set the custom APM Server URL (default: {defaultApmServerUrl})",values:{defaultApmServerUrl:"http://localhost:8200"}})}\n  '${d.apmServerUrl}': '{{{apmServerUrl}}}',\n\n  # ${o.i18n.translate("xpack.apm.tutorial.djangoClient.configure.commands.setServiceEnvironmentComment",{defaultMessage:"Set the service environment"})}\n  '${d.apmEnvironment}': '{{{apmEnvironment}}}',\n}\n\n# ${o.i18n.translate("xpack.apm.tutorial.djangoClient.configure.commands.addTracingMiddlewareComment",{defaultMessage:"To send performance metrics, add our tracing middleware:"})}\nMIDDLEWARE = (\n  'elasticapm.contrib.django.middleware.TracingMiddleware',\n  #...\n)`,flask:`# ${o.i18n.translate("xpack.apm.tutorial.flaskClient.configure.commands.initializeUsingEnvironmentVariablesComment",{defaultMessage:"initialize using environment variables"})}\nfrom elasticapm.contrib.flask import ElasticAPM\napp = Flask(__name__)\napm = ElasticAPM(app)\n\n# ${o.i18n.translate("xpack.apm.tutorial.flaskClient.configure.commands.configureElasticApmComment",{defaultMessage:"or configure to use ELASTIC_APM in your application's settings"})}\nfrom elasticapm.contrib.flask import ElasticAPM\napp.config['ELASTIC_APM'] = {\n  # ${o.i18n.translate("xpack.apm.tutorial.flaskClient.configure.commands.setRequiredServiceNameComment",{defaultMessage:"Set the required service name. Allowed characters:"})}\n  # ${o.i18n.translate("xpack.apm.tutorial.flaskClient.configure.commands.allowedCharactersComment",{defaultMessage:"a-z, A-Z, 0-9, -, _, and space"})}\n  #'${v.apmServiceName}': '{{{apmServiceName}}}',\n\n  # ${o.i18n.translate("xpack.apm.tutorial.flaskClient.configure.commands.useIfApmServerRequiresTokenComment",{defaultMessage:"Use if APM Server requires a secret token"})}\n  '${v.secretToken}': '{{{secretToken}}}',\n\n  # ${o.i18n.translate("xpack.apm.tutorial.flaskClient.configure.commands.setCustomApmServerUrlComment",{defaultMessage:"Set the custom APM Server URL (default: {defaultApmServerUrl})",values:{defaultApmServerUrl:"http://localhost:8200"}})}\n  '${v.apmServerUrl}': '{{{apmServerUrl}}}',\n\n  # ${o.i18n.translate("xpack.apm.tutorial.flaskClient.configure.commands.setServiceEnvironmentComment",{defaultMessage:"Set the service environment"})}\n  '${v.apmEnvironment}': '{{{apmEnvironment}}}',\n}\n\napm = ElasticAPM(app)`,rails:`# config/elastic_apm.yml:\n\n# Set the service name - allowed characters: a-z, A-Z, 0-9, -, _ and space\n# Defaults to the name of your Rails app\n${f.apmServiceName}: '{{{apmServiceName}}}'\n\n# Use if APM Server requires a secret token\n${f.secretToken}: '{{{secretToken}}}'\n\n# Set the custom APM Server URL (default: http://localhost:8200)\n${f.apmServerUrl}: '{{{apmServerUrl}}}'\n\n# Set the service environment\n${f.apmEnvironment}: '{{{apmEnvironment}}}'`,rack:`# config/elastic_apm.yml:\n\n# ${o.i18n.translate("xpack.apm.tutorial.rackClient.createConfig.commands.setServiceNameComment",{defaultMessage:"Set the service name - allowed characters: a-z, A-Z, 0-9, -, _ and space"})}\n# ${o.i18n.translate("xpack.apm.tutorial.rackClient.createConfig.commands.defaultsToTheNameOfRackAppClassComment",{defaultMessage:"Defaults to the name of your Rack app's class."})}\n${g.apmServiceName}: '{{{apmServiceName}}}'\n\n# ${o.i18n.translate("xpack.apm.tutorial.rackClient.createConfig.commands.useIfApmServerRequiresTokenComment",{defaultMessage:"Use if APM Server requires a token"})}\n${g.secretToken}: '{{{secretToken}}}'\n\n# ${o.i18n.translate("xpack.apm.tutorial.rackClient.createConfig.commands.setCustomApmServerComment",{defaultMessage:"Set custom APM Server URL (default: {defaultServerUrl})",values:{defaultServerUrl:"http://localhost:8200"}})}\n${g.apmServerUrl}: '{{{apmServerUrl}}}',\n\n# ${o.i18n.translate("xpack.apm.tutorial.rackClient.createConfig.commands.setServiceEnvironment",{defaultMessage:"Set the service environment"})}\n${g.apmEnvironment}: '{{{apmEnvironment}}}'`,go:`# ${o.i18n.translate("xpack.apm.tutorial.goClient.configure.commands.initializeUsingEnvironmentVariablesComment",{defaultMessage:"Initialize using environment variables:"})}\n\n# ${o.i18n.translate("xpack.apm.tutorial.goClient.configure.commands.setServiceNameComment",{defaultMessage:"Set the service name. Allowed characters: # a-z, A-Z, 0-9, -, _, and space."})}\n# ${o.i18n.translate("xpack.apm.tutorial.goClient.configure.commands.usedExecutableNameComment",{defaultMessage:"If ELASTIC_APM_SERVICE_NAME is not specified, the executable name will be used."})}\nexport ${S.apmServiceName}={{{apmServiceName}}}\n\n# ${o.i18n.translate("xpack.apm.tutorial.goClient.configure.commands.useIfApmRequiresTokenComment",{defaultMessage:"Use if APM Server requires a secret token"})}\nexport ${S.secretToken}={{{secretToken}}}\n\n# ${o.i18n.translate("xpack.apm.tutorial.goClient.configure.commands.setCustomApmServerUrlComment",{defaultMessage:"Set custom APM Server URL (default: {defaultApmServerUrl})",values:{defaultApmServerUrl:"http://localhost:8200"}})}\nexport ${S.apmServerUrl}={{{apmServerUrl}}}\n\n# ${o.i18n.translate("xpack.apm.tutorial.goClient.configure.commands.setServiceEnvironment",{defaultMessage:"Set the service environment"})}\nexport ${S.apmEnvironment}={{{apmEnvironment}}}\n`,dotnet:`{\n  "ElasticApm": {\n    "${h.apmServiceName}": "{{{apmServiceName}}}", //allowed characters: a-z, A-Z, 0-9, -, _, and space. Default is the entry assembly of the application\n    "${h.secretToken}": "{{{secretToken}}}",\n    "${h.apmServerUrl}": "{{{apmServerUrl}}}", //Set custom APM Server URL (default: http://localhost:8200)\n    "${h.apmEnvironment}": "{{{apmEnvironment}}}", // Set the service environment\n  }\n}`,php:`${E.apmServiceName}="{{{apmServiceName}}}"\n${E.secretToken}="{{{secretToken}}}"\n${E.apmServerUrl}="{{{apmServerUrl}}}"\n${E.apmEnvironment}="{{{apmEnvironment}}}"\n`,js:`import { init as initApm } from '@elastic/apm-rum'\nvar apm = initApm({\n\n  // ${o.i18n.translate("xpack.apm.tutorial.jsClient.installDependency.commands.setRequiredServiceNameComment",{defaultMessage:"Set required service name (allowed characters: a-z, A-Z, 0-9, -, _, and space)"})}\n  ${k.apmServiceName}: '{{{apmServiceName}}}',\n\n  // ${o.i18n.translate("xpack.apm.tutorial.jsClient.installDependency.commands.setCustomApmServerUrlComment",{defaultMessage:"Set custom APM Server URL (default: {defaultApmServerUrl})",values:{defaultApmServerUrl:"http://localhost:8200"}})}\n  ${k.apmServerUrl}: '{{{apmServerUrl}}}',\n\n  // ${o.i18n.translate("xpack.apm.tutorial.jsClient.installDependency.commands.setServiceVersionComment",{defaultMessage:"Set the service version (required for source map feature)"})}\n  serviceVersion: '',\n\n  // ${o.i18n.translate("xpack.apm.tutorial.jsClient.installDependency.commands.setServiceEnvironmentComment",{defaultMessage:"Set the service environment"})}\n  ${k.apmEnvironment}: '{{{apmEnvironment}}}'\n})`,js_script:`<script src="https://your-cdn-host.com/path/to/elastic-apm-rum.umd.min.js" crossorigin><\/script>\n<script>\n  elasticApm.init({\n    ${k.apmServiceName}: '{{{apmServiceName}}}',\n    ${k.apmServerUrl}: '{{{apmServerUrl}}}',\n  })\n<\/script>\n`},C={java:p,node:u,django:d,flask:v,rails:f,rack:g,go:S,dotnet:h,php:E,js:k};var b=n(7);function y({variables:e,data:t}){if(!e)return null;const n=[{field:"setting",name:o.i18n.translate("xpack.apm.tutorial.agent.column.configSettings",{defaultMessage:"Configuration setting"})},{field:"value",name:o.i18n.translate("xpack.apm.tutorial.agent.column.configValue",{defaultMessage:"Configuration value"}),render:(e,{value:t})=>r.a.createElement(i.EuiText,{size:"s",color:"accent"},t)}],a=Object.keys(e).map((n=>({setting:e[n],value:Object(b.get)(t,n)})));return r.a.createElement(i.EuiBasicTable,{items:a,columns:n})}function _({variantId:e,apmServerUrl:t,secretToken:n}){const a={apmServiceName:"my-service-name",apmEnvironment:"my-environment"};if("openTelemetry"===e)return r.a.createElement(r.a.Fragment,null,r.a.createElement(i.EuiSpacer,null),r.a.createElement(l,{apmServerUrl:t,secretToken:n}));const o=function({variantId:e,policyDetails:t,defaultValues:n}){const a=T[e];return a?m.a.render(a,{...t,...n}):""}({variantId:e,policyDetails:{apmServerUrl:t,secretToken:n},defaultValues:a}),s=function(e){return C[e]}(e);return r.a.createElement(r.a.Fragment,null,r.a.createElement(i.EuiSpacer,null),r.a.createElement(y,{variables:s,data:{apmServerUrl:t,secretToken:n,...a}}),r.a.createElement(i.EuiSpacer,null),r.a.createElement(i.EuiCodeBlock,{isCopyable:!0,language:"java"===e?e:"bash","data-test-subj":"commands"},o))}}}]);