import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
var _excluded = ["id"];
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import uuid from 'uuid';

/**
 * This is useful for when you have arrays without an ID and need to add one for
 * ReactJS keys. I break the types slightly by introducing an id to an arbitrary item
 * but then cast it back to the regular type T.
 * Usage of this could be considered tech debt as I am adding an ID when the backend
 * could be doing the same thing but it depends on how you want to model your data and
 * if you view modeling your data with id's to please ReactJS a good or bad thing.
 * @param item The item to add an id to.
 */

export var addIdToItem = function addIdToItem(item) {
  var maybeId = item;
  if (maybeId.id != null) {
    return item;
  } else {
    return _objectSpread(_objectSpread({}, item), {}, {
      id: uuid.v4()
    });
  }
};

/**
 * This is to reverse the id you added to your arrays for ReactJS keys.
 * @param item The item to remove the id from.
 */
export var removeIdFromItem = function removeIdFromItem(item) {
  var maybeId = item;
  if (maybeId.id != null) {
    var id = maybeId.id,
      noId = _objectWithoutProperties(maybeId, _excluded);
    return noId;
  } else {
    return item;
  }
};