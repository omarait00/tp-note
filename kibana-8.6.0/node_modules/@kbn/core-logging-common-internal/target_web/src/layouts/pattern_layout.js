import _createForOfIteratorHelper from "@babel/runtime/helpers/createForOfIteratorHelper";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import { LoggerConversion, LevelConversion, MetaConversion, MessageConversion, DateConversion } from './conversions';

/**
 * Default pattern used by PatternLayout if it's not overridden in the configuration.
 */
var DEFAULT_PATTERN = "[%date][%level][%logger] %message";
var DEFAULT_CONVERSIONS = [LoggerConversion, MessageConversion, LevelConversion, MetaConversion, DateConversion];
/**
 * Layout that formats `LogRecord` using the `pattern` string with optional
 * color highlighting (eg. to make log messages easier to read in the terminal).
 * @internal
 */
export var PatternLayout = /*#__PURE__*/function () {
  function PatternLayout() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$pattern = _ref.pattern,
      pattern = _ref$pattern === void 0 ? DEFAULT_PATTERN : _ref$pattern,
      _ref$highlight = _ref.highlight,
      highlight = _ref$highlight === void 0 ? false : _ref$highlight,
      _ref$conversions = _ref.conversions,
      conversions = _ref$conversions === void 0 ? DEFAULT_CONVERSIONS : _ref$conversions;
    _classCallCheck(this, PatternLayout);
    _defineProperty(this, "pattern", void 0);
    _defineProperty(this, "highlight", void 0);
    _defineProperty(this, "conversions", void 0);
    this.pattern = pattern;
    this.highlight = highlight;
    this.conversions = conversions;
  }

  /**
   * Formats `LogRecord` into a string based on the specified `pattern` and `highlighting` options.
   * @param record Instance of `LogRecord` to format into string.
   */
  _createClass(PatternLayout, [{
    key: "format",
    value: function format(record) {
      var recordString = this.pattern;
      var _iterator = _createForOfIteratorHelper(this.conversions),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var conversion = _step.value;
          recordString = recordString.replace(conversion.pattern, conversion.convert.bind(null, record, this.highlight));
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return recordString;
    }
  }]);
  return PatternLayout;
}();