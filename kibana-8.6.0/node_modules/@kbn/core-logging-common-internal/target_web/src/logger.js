import _createForOfIteratorHelper from "@babel/runtime/helpers/createForOfIteratorHelper";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import { LogLevel } from '@kbn/logging';

/**
 * @internal
 */

/**
 * A basic, abstract logger implementation that delegates the create of log records to the child's createLogRecord function.
 * @internal
 */
export var AbstractLogger = /*#__PURE__*/function () {
  function AbstractLogger(context, level, appenders, factory) {
    _classCallCheck(this, AbstractLogger);
    this.context = context;
    this.level = level;
    this.appenders = appenders;
    this.factory = factory;
  }
  _createClass(AbstractLogger, [{
    key: "trace",
    value: function trace(message, meta) {
      this.log(this.createLogRecord(LogLevel.Trace, message, meta));
    }
  }, {
    key: "debug",
    value: function debug(message, meta) {
      this.log(this.createLogRecord(LogLevel.Debug, message, meta));
    }
  }, {
    key: "info",
    value: function info(message, meta) {
      this.log(this.createLogRecord(LogLevel.Info, message, meta));
    }
  }, {
    key: "warn",
    value: function warn(errorOrMessage, meta) {
      this.log(this.createLogRecord(LogLevel.Warn, errorOrMessage, meta));
    }
  }, {
    key: "error",
    value: function error(errorOrMessage, meta) {
      this.log(this.createLogRecord(LogLevel.Error, errorOrMessage, meta));
    }
  }, {
    key: "fatal",
    value: function fatal(errorOrMessage, meta) {
      this.log(this.createLogRecord(LogLevel.Fatal, errorOrMessage, meta));
    }
  }, {
    key: "isLevelEnabled",
    value: function isLevelEnabled(levelId) {
      return this.level.supports(LogLevel.fromId(levelId));
    }
  }, {
    key: "log",
    value: function log(record) {
      if (!this.level.supports(record.level)) {
        return;
      }
      var _iterator = _createForOfIteratorHelper(this.appenders),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var appender = _step.value;
          appender.append(record);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "get",
    value: function get() {
      var _this$factory;
      for (var _len = arguments.length, childContextPaths = new Array(_len), _key = 0; _key < _len; _key++) {
        childContextPaths[_key] = arguments[_key];
      }
      return (_this$factory = this.factory).get.apply(_this$factory, [this.context].concat(childContextPaths));
    }
  }]);
  return AbstractLogger;
}();