"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.buildCombinedFilter = buildCombinedFilter;
exports.isCombinedFilter = isCombinedFilter;
var _types = require("./types");
var _build_empty_filter = require("./build_empty_filter");
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

/**
 * @public
 */
function isCombinedFilter(filter) {
  var _filter$meta;
  return (filter === null || filter === void 0 ? void 0 : (_filter$meta = filter.meta) === null || _filter$meta === void 0 ? void 0 : _filter$meta.type) === _types.FILTERS.COMBINED;
}

/**
 * Builds an COMBINED filter. An COMBINED filter is a filter with multiple sub-filters. Each sub-filter (FilterItem) represents a
 * condition.
 * @param filters An array of CombinedFilterItem
 * @public
 */
function buildCombinedFilter(filters) {
  const filter = (0, _build_empty_filter.buildEmptyFilter)(false);
  return {
    ...filter,
    meta: {
      ...filter.meta,
      type: _types.FILTERS.COMBINED,
      params: filters
    }
  };
}