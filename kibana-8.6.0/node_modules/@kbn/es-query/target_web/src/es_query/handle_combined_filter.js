import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import { isCombinedFilter } from '../filters';
import { buildQueryFromFilters } from './from_filters';

/** @internal */
export var handleCombinedFilter = function handleCombinedFilter(filter, inputDataViews) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  if (!isCombinedFilter(filter)) return filter;
  var params = filter.meta.params;
  var should = params.map(function (subFilter) {
    var subFilters = Array.isArray(subFilter) ? subFilter : [subFilter];
    return {
      bool: buildQueryFromFilters(flattenFilters(subFilters), inputDataViews, options)
    };
  });
  return _objectSpread(_objectSpread({}, filter), {}, {
    query: {
      bool: {
        should: should,
        minimum_should_match: 1
      }
    }
  });
};
function flattenFilters(filters) {
  return filters.reduce(function (result, filter) {
    if (Array.isArray(filter)) return [].concat(_toConsumableArray(result), _toConsumableArray(flattenFilters(filter)));
    return [].concat(_toConsumableArray(result), [filter]);
  }, []);
}