import _objectSpread from "@babel/runtime/helpers/objectSpread2";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import { FILTERS } from './types';
import { buildEmptyFilter } from './build_empty_filter';

/**
 * Each item in an COMBINED filter may represent either one filter (to be ORed) or an array of filters (ANDed together before
 * becoming part of the OR clause).
 * @public
 */

/**
 * @public
 */
export function isCombinedFilter(filter) {
  var _filter$meta;
  return (filter === null || filter === void 0 ? void 0 : (_filter$meta = filter.meta) === null || _filter$meta === void 0 ? void 0 : _filter$meta.type) === FILTERS.COMBINED;
}

/**
 * Builds an COMBINED filter. An COMBINED filter is a filter with multiple sub-filters. Each sub-filter (FilterItem) represents a
 * condition.
 * @param filters An array of CombinedFilterItem
 * @public
 */
export function buildCombinedFilter(filters) {
  var filter = buildEmptyFilter(false);
  return _objectSpread(_objectSpread({}, filter), {}, {
    meta: _objectSpread(_objectSpread({}, filter.meta), {}, {
      type: FILTERS.COMBINED,
      params: filters
    })
  });
}