import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _regeneratorRuntime from "@babel/runtime/regenerator";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import memoizeIntlConstructor from 'intl-format-cache';
import IntlMessageFormat from 'intl-messageformat';
import IntlRelativeFormat from 'intl-relativeformat';
import { formats as EN_FORMATS } from './formats';
import { hasValues, isObject, isString, mergeAll } from './helper';
import { isPseudoLocale, translateUsingPseudoLocale } from './pseudo_locale';

// Add all locale data to `IntlMessageFormat`.
import './locales';
var EN_LOCALE = 'en';
var translationsForLocale = {};
var getMessageFormat = memoizeIntlConstructor(IntlMessageFormat);
var defaultLocale = EN_LOCALE;
var currentLocale = EN_LOCALE;
var formats = EN_FORMATS;
IntlMessageFormat.defaultLocale = defaultLocale;
IntlRelativeFormat.defaultLocale = defaultLocale;

/**
 * Returns message by the given message id.
 * @param id - path to the message
 */
function getMessageById(id) {
  var translation = getTranslation();
  return translation.messages ? translation.messages[id] : undefined;
}

/**
 * Normalizes locale to make it consistent with IntlMessageFormat locales
 * @param locale
 */
function normalizeLocale(locale) {
  return locale.toLowerCase();
}

/**
 * Provides a way to register translations with the engine
 * @param newTranslation
 * @param [locale = messages.locale]
 */
export function addTranslation(newTranslation) {
  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : newTranslation.locale;
  if (!locale || !isString(locale)) {
    throw new Error('[I18n] A `locale` must be a non-empty string to add messages.');
  }
  if (newTranslation.locale && newTranslation.locale !== locale) {
    throw new Error('[I18n] A `locale` in the translation object is different from the one provided as a second argument.');
  }
  var normalizedLocale = normalizeLocale(locale);
  var existingTranslation = translationsForLocale[normalizedLocale] || {
    messages: {}
  };
  translationsForLocale[normalizedLocale] = {
    formats: newTranslation.formats || existingTranslation.formats,
    locale: newTranslation.locale || existingTranslation.locale,
    messages: _objectSpread(_objectSpread({}, existingTranslation.messages), newTranslation.messages)
  };
}

/**
 * Returns messages for the current language
 */
export function getTranslation() {
  return translationsForLocale[currentLocale] || {
    messages: {}
  };
}

/**
 * Tells the engine which language to use by given language key
 * @param locale
 */
export function setLocale(locale) {
  if (!locale || !isString(locale)) {
    throw new Error('[I18n] A `locale` must be a non-empty string.');
  }
  currentLocale = normalizeLocale(locale);
}

/**
 * Returns the current locale
 */
export function getLocale() {
  return currentLocale;
}

/**
 * Tells the library which language to fallback when missing translations
 * @param locale
 */
export function setDefaultLocale(locale) {
  if (!locale || !isString(locale)) {
    throw new Error('[I18n] A `locale` must be a non-empty string.');
  }
  defaultLocale = normalizeLocale(locale);
  IntlMessageFormat.defaultLocale = defaultLocale;
  IntlRelativeFormat.defaultLocale = defaultLocale;
}
export function getDefaultLocale() {
  return defaultLocale;
}

/**
 * Supplies a set of options to the underlying formatter
 * [Default format options used as the prototype of the formats]
 * {@link https://github.com/yahoo/intl-messageformat/blob/master/src/core.js#L62}
 * These are used when constructing the internal Intl.NumberFormat
 * and Intl.DateTimeFormat instances.
 * @param newFormats
 * @param [newFormats.number]
 * @param [newFormats.date]
 * @param [newFormats.time]
 */
export function setFormats(newFormats) {
  if (!isObject(newFormats) || !hasValues(newFormats)) {
    throw new Error('[I18n] A `formats` must be a non-empty object.');
  }
  formats = mergeAll(formats, newFormats);
}

/**
 * Returns current formats
 */
export function getFormats() {
  return formats;
}

/**
 * Returns array of locales having translations
 */
export function getRegisteredLocales() {
  return Object.keys(translationsForLocale);
}
/**
 * Translate message by id
 * @param id - translation id to be translated
 * @param [options]
 * @param [options.values] - values to pass into translation
 * @param [options.defaultMessage] - will be used unless translation was successful
 */
export function translate(id, _ref) {
  var _ref$values = _ref.values,
    values = _ref$values === void 0 ? {} : _ref$values,
    defaultMessage = _ref.defaultMessage;
  var shouldUsePseudoLocale = isPseudoLocale(currentLocale);
  if (!id || !isString(id)) {
    throw new Error('[I18n] An `id` must be a non-empty string to translate a message.');
  }
  var message = shouldUsePseudoLocale ? defaultMessage : getMessageById(id);
  if (!message && !defaultMessage) {
    throw new Error("[I18n] Cannot format message: \"".concat(id, "\". Default message must be provided."));
  }
  if (message) {
    try {
      // We should call `format` even for messages without any value references
      // to let it handle escaped curly braces `\\{` that are the part of the text itself
      // and not value reference boundaries.
      var formattedMessage = getMessageFormat(message, getLocale(), getFormats()).format(values);
      return shouldUsePseudoLocale ? translateUsingPseudoLocale(formattedMessage) : formattedMessage;
    } catch (e) {
      throw new Error("[I18n] Error formatting message: \"".concat(id, "\" for locale: \"").concat(getLocale(), "\".\n").concat(e));
    }
  }
  try {
    var msg = getMessageFormat(defaultMessage, getDefaultLocale(), getFormats());
    return msg.format(values);
  } catch (e) {
    throw new Error("[I18n] Error formatting the default message for: \"".concat(id, "\".\n").concat(e));
  }
}

/**
 * Initializes the engine
 * @param newTranslation
 */
export function init(newTranslation) {
  if (!newTranslation) {
    return;
  }
  addTranslation(newTranslation);
  if (newTranslation.locale) {
    setLocale(newTranslation.locale);
  }
  if (newTranslation.formats) {
    setFormats(newTranslation.formats);
  }
}

/**
 * Loads JSON with translations from the specified URL and initializes i18n engine with them.
 * @param translationsUrl URL pointing to the JSON bundle with translations.
 */
export function load(_x) {
  return _load.apply(this, arguments);
}
function _load() {
  _load = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(translationsUrl) {
    var response;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return fetch(translationsUrl, {
              credentials: 'same-origin'
            });
          case 2:
            response = _context.sent;
            if (!(response.status >= 300)) {
              _context.next = 5;
              break;
            }
            throw new Error("Translations request failed with status code: ".concat(response.status));
          case 5:
            _context.t0 = init;
            _context.next = 8;
            return response.json();
          case 8:
            _context.t1 = _context.sent;
            (0, _context.t0)(_context.t1);
          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _load.apply(this, arguments);
}