"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateIndexPattern = exports.isEmptyString = exports.indexPatternRt = exports.containsSpaces = exports.containsEmptyEntries = void 0;
var rt = _interopRequireWildcard(require("io-ts"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

const isEmptyString = value => value === '';
exports.isEmptyString = isEmptyString;
const containsSpaces = value => value.includes(' ');
exports.containsSpaces = containsSpaces;
const containsEmptyEntries = value => value.split(',').some(isEmptyString);
exports.containsEmptyEntries = containsEmptyEntries;
const validateIndexPattern = indexPattern => {
  return !isEmptyString(indexPattern) && !containsSpaces(indexPattern) && !containsEmptyEntries(indexPattern);
};
exports.validateIndexPattern = validateIndexPattern;
const indexPatternRt = rt.brand(rt.string, pattern => validateIndexPattern(pattern), 'IndexPattern');
exports.indexPatternRt = indexPatternRt;