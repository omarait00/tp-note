import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import { pipe } from 'fp-ts/lib/pipeable';
import { fold } from 'fp-ts/lib/Either';

// TODO: This is copied in a few other spots and probably should live within its own kbn package
// rather than living here. A package such as kbn-security-solution-fp-utils
export var toPromise = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(taskEither) {
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.t0 = pipe;
            _context.next = 3;
            return taskEither();
          case 3:
            _context.t1 = _context.sent;
            _context.t2 = fold(function (e) {
              return Promise.reject(e);
            }, function (a) {
              return Promise.resolve(a);
            });
            return _context.abrupt("return", (0, _context.t0)(_context.t1, _context.t2));
          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return function toPromise(_x) {
    return _ref.apply(this, arguments);
  };
}();
export var toError = function toError(e) {
  return e instanceof Error ? e : new Error(String(e));
};