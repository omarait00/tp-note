"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logicals = exports.logicalTextAlignStyle = exports.logicalTextAlignCSS = exports.logicalText = exports.logicalStyle = exports.logicalSizeStyle = exports.logicalSizeCSS = exports.logicalSide = exports.logicalCSSWithFallback = exports.logicalCSS = exports.LOGICAL_TEXT_ALIGNMENT = exports.LOGICAL_SIDES = exports.LOGICAL_PROPERTIES = void 0;

var _common = require("../../components/common");

var _logicals = _interopRequireDefault(require("./logicals.json"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * EUI utilizes logical CSS properties to enable directional writing-modes.
 * To encourage use of logical properties, we provide a few helper utilities to
 * convert certain directional properties to logical properties.
 * https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Logical_Properties
 */
var logicalSide = {
  left: 'inline-start',
  right: 'inline-end',
  top: 'block-start',
  bottom: 'block-end',
  horizontal: 'inline',
  vertical: 'block'
};
exports.logicalSide = logicalSide;
var LOGICAL_SIDES = (0, _common.keysOf)(logicalSide);
exports.LOGICAL_SIDES = LOGICAL_SIDES;
var logicals = _logicals.default;
exports.logicals = logicals;
var LOGICAL_PROPERTIES = (0, _common.keysOf)(logicals);
exports.LOGICAL_PROPERTIES = LOGICAL_PROPERTIES;

/**
 *
 * @param property A string that is a valid CSS logical property
 * @param value String to output as the property value
 * @returns `string` Returns the logical CSS property version for the given `property: value` pair
 */
var logicalCSS = function logicalCSS(property, value) {
  return "".concat(logicals[property], ": ").concat(value, ";");
};
/**
 * Some logical properties are not yet fully supported by all browsers.
 * For those cases, we should use the old property as a fallback for
 * browsers missing support, while allowing supporting browsers to use
 * the logical properties.
 *
 * Examples:
 * https://caniuse.com/?search=overflow-block
 * https://caniuse.com/mdn-css_properties_float_flow_relative_values
 */


exports.logicalCSS = logicalCSS;

var logicalCSSWithFallback = function logicalCSSWithFallback(property, value) {
  return "\n  ".concat(property, ": ").concat(value, ";\n  ").concat(logicalCSS(property, value), "\n");
};
/**
 *
 * @param property A string that is a valid CSS logical property
 * @param value String to output as the property value
 * @returns `object` Returns the logical CSS property version for the given `property: value` pair
 */


exports.logicalCSSWithFallback = logicalCSSWithFallback;

var logicalStyle = function logicalStyle(property, value) {
  // Strip hyphens and camelCase the CSS logical property so React doesn't throw errors
  var camelCasedProperty = logicals[property].replace(/-\w/g, function (str) {
    return str.charAt(1).toUpperCase();
  });
  return _defineProperty({}, camelCasedProperty, value);
};
/**
 *
 * @param width A string value for the LTR width
 * @param height A string value for the LTR height
 * @returns `string` Returns the logical CSS properties for height and width
 */


exports.logicalStyle = logicalStyle;

var logicalSizeCSS = function logicalSizeCSS(width, height) {
  return "\n    ".concat(logicals.width, ": ").concat(width, ";\n    ").concat(logicals.height, ": ").concat(height, ";\n  ");
};
/**
 *
 * @param width A string value for the LTR width
 * @param height A string value for the LTR height
 * @returns `object` Returns the logical CSS properties for height and width
 */


exports.logicalSizeCSS = logicalSizeCSS;

var logicalSizeStyle = function logicalSizeStyle(width, height) {
  var _ref2;

  return _ref2 = {}, _defineProperty(_ref2, logicals.width, width), _defineProperty(_ref2, logicals.height, height), _ref2;
}; // Text alignment is separate because its the value that changes not the property


exports.logicalSizeStyle = logicalSizeStyle;
var logicalText = {
  'text-align': {
    left: 'start',
    center: 'center',
    right: 'end'
  }
};
exports.logicalText = logicalText;
var LOGICAL_TEXT_ALIGNMENT = (0, _common.keysOf)(logicalText['text-align']);
exports.LOGICAL_TEXT_ALIGNMENT = LOGICAL_TEXT_ALIGNMENT;

/**
 *
 * @param property A string that is a valid CSS logical property
 * @param value String to output as the property value
 * @returns `string` Returns the logical CSS property version for the given `property: value` pair
 */
var logicalTextAlignCSS = function logicalTextAlignCSS(value) {
  return "text-align: ".concat(logicalText['text-align'][value], ";");
};
/**
 *
 * @param property A string that is a valid CSS logical property
 * @param value String to output as the property value
 * @returns `object` Returns the logical CSS property version for the given `property: value` pair
 */


exports.logicalTextAlignCSS = logicalTextAlignCSS;

var logicalTextAlignStyle = function logicalTextAlignStyle(value) {
  return {
    textAlign: logicalText['text-align'][value]
  };
};

exports.logicalTextAlignStyle = logicalTextAlignStyle;